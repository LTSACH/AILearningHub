{
  "core": {
    "size_distribution": {
      "tutorial": {
        "title": "Image Size Distribution Analysis",
        "explanation": "This section analyzes the distribution of image dimensions in the dataset, including width, height, and aspect ratios. Understanding size distributions is crucial for:",
        "key_points": [
          "Identifying common image dimensions in the dataset",
          "Detecting outliers or unusual sizes",
          "Understanding aspect ratio patterns",
          "Planning data preprocessing strategies",
          "Optimizing model input requirements"
        ],
        "insights": [
          "Most images follow standard aspect ratios (4:3, 16:9)",
          "Width and height distributions show dataset characteristics",
          "Aspect ratio analysis reveals image orientation patterns",
          "Size outliers may indicate data quality issues"
        ]
      },
      "code_files": {
        "plotly": "code_examples/core/size_distribution_plotly.py",
        "matplotlib": "code_examples/core/size_distribution_matplotlib.py",
        "seaborn": "code_examples/core/size_distribution_seaborn.py"
      }
    }
  },
  "classification": {
    "class_distribution": {
      "tutorial": {
        "title": "Class Distribution Analysis",
        "explanation": "Analyzing the distribution of classes in the dataset to understand data balance and potential biases.",
        "key_points": [
          "Understanding class frequency distribution",
          "Identifying imbalanced classes",
          "Planning data augmentation strategies",
          "Optimizing training procedures"
        ],
        "insights": [
          "Balanced datasets lead to better model performance",
          "Imbalanced classes may require special handling",
          "Class distribution affects model bias"
        ]
      },
      "code_files": {
        "plotly": "code_examples/classification/class_distribution_plotly.py",
        "matplotlib": "code_examples/classification/class_distribution_matplotlib.py",
        "seaborn": "code_examples/classification/class_distribution_seaborn.py"
      }
    }
  },
  "detection": {
    "object_distribution": {
      "tutorial": {
        "title": "Object Distribution Analysis",
        "explanation": "Analyzing the distribution of objects and their properties in the dataset.",
        "key_points": [
          "Understanding object frequency",
          "Analyzing object sizes and positions",
          "Identifying detection challenges"
        ],
        "insights": [
          "Object size distribution affects detection accuracy",
          "Small objects are harder to detect",
          "Object density varies across images"
        ]
      },
      "code_files": {
        "plotly": "code_examples/detection/object_distribution_plotly.py",
        "matplotlib": "code_examples/detection/object_distribution_matplotlib.py",
        "seaborn": "code_examples/detection/object_distribution_seaborn.py"
      }
    }
  },
  "segmentation": {
    "mask_analysis": {
      "tutorial": {
        "title": "Segmentation Mask Analysis",
        "explanation": "Analyzing segmentation masks to understand object boundaries and complexity.",
        "key_points": [
          "Understanding mask complexity",
          "Analyzing boundary smoothness",
          "Identifying segmentation challenges"
        ],
        "insights": [
          "Complex masks require more sophisticated models",
          "Boundary smoothness affects segmentation quality",
          "Mask complexity varies by object type"
        ]
      },
      "code_files": {
        "plotly": "code_examples/segmentation/mask_analysis_plotly.py",
        "matplotlib": "code_examples/segmentation/mask_analysis_matplotlib.py",
        "seaborn": "code_examples/segmentation/mask_analysis_seaborn.py"
      }
    }
  }
}
