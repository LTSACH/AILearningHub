{
  "version": "1.0",
  "dataset": "oxford-pets",
  "last_updated": "2025-01-19",
  "description": "Tutorial code examples for Oxford-IIIT Pets dataset EDA",
  "classification": {
    "dataset_overview": {
      "title": "Oxford Pets Dataset Overview",
      "description": "Explore the Oxford-IIIT Pet Dataset structure and statistics",
      "explanation": {
        "what": "Dataset overview provides a high-level summary of the Oxford Pets dataset: number of images, breeds, species distribution, and data splits.",
        "why": "Understanding dataset structure is the first step in image classification EDA. It helps identify class balance, data quality, and potential challenges.",
        "how": "Load metadata, check total images/breeds, analyze species distribution, examine train/val/test splits. Look for class imbalance that might affect model performance."
      },
      "code_files": {
        "plotly": "classification/dataset_overview_plotly.py",
        "matplotlib": "classification/dataset_overview_matplotlib.py",
        "seaborn": "classification/dataset_overview_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/data/full_metadata.csv"
      ],
      "chart_match": [
        "species-pie",
        "split-stats"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn"
      ]
    },
    "breed_distribution": {
      "title": "Breed Distribution Analysis",
      "description": "Analyze the distribution of 37 breeds and check class balance",
      "explanation": {
        "what": "Breed distribution analysis examines how images are distributed across 37 different pet breeds.",
        "why": "Class imbalance can significantly impact model performance. Understanding distribution helps in choosing appropriate training strategies.",
        "how": "Count images per breed, calculate class balance metrics (Gini coefficient, entropy), identify overrepresented and underrepresented classes."
      },
      "code_files": {
        "plotly": "classification/breed_distribution_plotly.py",
        "matplotlib": "classification/breed_distribution_matplotlib.py",
        "seaborn": "classification/breed_distribution_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/data/full_metadata.csv"
      ],
      "chart_match": [
        "class-dist-bar",
        "balance-metrics"
      ],
      "requirements": [
        "pandas",
        "numpy",
        "plotly",
        "matplotlib",
        "seaborn"
      ]
    },
    "feature_extraction": {
      "title": "Feature Extraction with ResNet50",
      "description": "Extract deep features and visualize with t-SNE/UMAP",
      "explanation": {
        "what": "Feature extraction uses a pretrained ResNet50 model to convert images into 2048-dimensional feature vectors, then reduces to 2D for visualization.",
        "why": "Deep features capture high-level visual patterns. Dimensionality reduction reveals if breeds are separable in feature space.",
        "how": "Use pre-computed t-SNE/UMAP coordinates from the full dataset. Visualize 2D projections colored by breed to understand feature space structure."
      },
      "code_files": {
        "plotly": "classification/feature_extraction_plotly.py",
        "matplotlib": "classification/feature_extraction_matplotlib.py",
        "seaborn": "classification/feature_extraction_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/classification/tsne_coordinates.csv",
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/classification/umap_coordinates.csv"
      ],
      "chart_match": [
        "tsne-plot",
        "umap-plot"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn"
      ],
      "note": "Uses pre-computed features for instant visualization. Advanced version available for computing from scratch."
    },
    "similarity_analysis": {
      "title": "Breed Similarity Analysis",
      "description": "Compute breed similarity matrix using feature-based cosine distance",
      "explanation": {
        "what": "Similarity analysis computes pairwise cosine similarity between breed feature representations to identify visually similar breeds.",
        "why": "Similar breeds are harder to distinguish. Knowing similarity helps understand classification challenges and potential confusion.",
        "how": "Use pre-computed similarity matrix (37\u00d737) from averaged breed features. Visualize as heatmap to identify most/least similar breed pairs."
      },
      "code_files": {
        "plotly": "classification/similarity_analysis_plotly.py",
        "matplotlib": "classification/similarity_analysis_matplotlib.py",
        "seaborn": "classification/similarity_analysis_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/classification/similarity_matrix.csv"
      ],
      "chart_match": [
        "similarity-heatmap"
      ],
      "requirements": [
        "pandas",
        "numpy",
        "plotly",
        "matplotlib",
        "seaborn"
      ],
      "note": "Uses pre-computed similarity matrix for instant visualization."
    }
  },
  "detection": {
    "bbox_overview": {
      "title": "Bounding Box Overview",
      "description": "Overview of bbox annotations and detection task statistics",
      "explanation": {
        "what": "Analyze bounding box annotations for pet head detection across 3,671 images (train+val splits).",
        "why": "Understanding bbox distribution helps assess data quality and prepare for detection model training.",
        "how": "Load pre-computed bbox statistics from CSV, visualize species distribution, split ratios, and breed coverage."
      },
      "code_files": {
        "plotly": "detection/bbox_overview_plotly.py",
        "matplotlib": "detection/bbox_overview_matplotlib.py",
        "seaborn": "detection/bbox_overview_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/detection/bbox_statistics.csv"
      ],
      "chart_match": [
        "species-distribution",
        "split-distribution"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    },
    "bbox_properties": {
      "title": "Bounding Box Properties Analysis",
      "description": "Analyze bbox dimensions, aspect ratios, and size distributions",
      "explanation": {
        "what": "Detailed analysis of bounding box properties: width, height, area, aspect ratios, and COCO-style size categories.",
        "why": "Understanding bbox characteristics helps choose appropriate anchor boxes and model architectures for detection.",
        "how": "Load bbox statistics CSV, compute size distributions, aspect ratio analysis, and categorize by COCO standards (small/medium/large)."
      },
      "code_files": {
        "plotly": "detection/bbox_properties_plotly.py",
        "matplotlib": "detection/bbox_properties_matplotlib.py",
        "seaborn": "detection/bbox_properties_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/detection/bbox_statistics.csv"
      ],
      "chart_match": [
        "bbox-size-chart",
        "aspect-ratio-chart",
        "size-category-chart",
        "area-distribution-chart"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    },
    "spatial_distribution": {
      "title": "Spatial Distribution Analysis",
      "description": "Analyze bbox positions and spatial patterns within images",
      "explanation": {
        "what": "Spatial analysis of bounding box positions: center coordinates, position heatmaps, center bias, and grid distribution.",
        "why": "Spatial patterns reveal if objects are centered, distributed evenly, or biased toward certain regions - important for data augmentation strategies.",
        "how": "Load spatial distribution CSV with normalized center positions, create heatmaps, calculate distance from center, analyze 3\u00d73 grid distribution."
      },
      "code_files": {
        "plotly": "detection/spatial_distribution_plotly.py",
        "matplotlib": "detection/spatial_distribution_matplotlib.py",
        "seaborn": "detection/spatial_distribution_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/detection/spatial_distribution.csv"
      ],
      "chart_match": [
        "position-heatmap",
        "center-bias-chart",
        "grid-distribution-chart"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    },
    "quality_analysis": {
      "title": "Annotation Quality Analysis",
      "description": "Assess bbox annotation quality and consistency",
      "explanation": {
        "what": "Quality assessment of bounding box annotations: size consistency (CV), coverage ratios, outlier detection, and per-breed quality metrics.",
        "why": "High-quality annotations are crucial for training robust detection models. Identifying inconsistencies helps improve data quality.",
        "how": "Load quality metrics CSV, calculate coefficient of variation for sizes, detect outliers, assess coverage consistency across breeds."
      },
      "code_files": {
        "plotly": "detection/quality_analysis_plotly.py",
        "matplotlib": "detection/quality_analysis_matplotlib.py",
        "seaborn": "detection/quality_analysis_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/detection/quality_metrics.csv",
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/detection/bbox_statistics.csv"
      ],
      "chart_match": [
        "quality-score",
        "consistency-metrics"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    }
  },
  "segmentation": {
    "mask_overview": {
      "title": "Segmentation Mask Overview",
      "description": "Overview of segmentation masks and trimap statistics",
      "explanation": {
        "what": "Analyze segmentation mask annotations (3,680 masks from train+val). Examine foreground, boundary, and background pixel distributions.",
        "why": "Understanding mask composition is essential for semantic segmentation tasks. It reveals class balance at pixel level.",
        "how": "Load mask statistics CSV, visualize species/split distribution, analyze pixel class percentages (FG/Boundary/BG)."
      },
      "code_files": {
        "plotly": "segmentation/mask_overview_plotly.py",
        "matplotlib": "segmentation/mask_overview_matplotlib.py",
        "seaborn": "segmentation/mask_overview_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/segmentation/mask_statistics.csv"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    },
    "pixel_distribution": {
      "title": "Pixel Distribution Analysis",
      "description": "Analyze foreground, boundary, and background pixel distributions",
      "explanation": {
        "what": "Pixel-level distribution analysis across breeds: foreground, boundary, and background percentages.",
        "why": "Pixel distribution reveals class imbalance at fine-grained level. Important for loss weighting and data augmentation.",
        "how": "Load pixel distribution CSV (aggregated by breed), visualize mean/std of each class, identify pixel-level imbalances."
      },
      "code_files": {
        "plotly": "segmentation/pixel_distribution_plotly.py",
        "matplotlib": "segmentation/pixel_distribution_matplotlib.py",
        "seaborn": "segmentation/pixel_distribution_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/segmentation/pixel_distribution.csv"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn"
      ]
    },
    "mask_quality": {
      "title": "Mask Quality Analysis",
      "description": "Assess segmentation mask quality and consistency",
      "explanation": {
        "what": "Quality assessment: coverage consistency (CV), per-breed pixel distribution, outlier detection.",
        "why": "High-quality masks are crucial for training accurate segmentation models. Identifying inconsistencies improves data quality.",
        "how": "Load quality metrics CSV, calculate coverage CV, assess pixel distribution consistency, detect anomalies."
      },
      "code_files": {
        "plotly": "segmentation/mask_quality_plotly.py",
        "matplotlib": "segmentation/mask_quality_matplotlib.py",
        "seaborn": "segmentation/mask_quality_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/segmentation/quality_metrics.csv",
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/segmentation/mask_statistics.csv"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn",
        "numpy"
      ]
    },
    "boundary_analysis": {
      "title": "Boundary Analysis",
      "description": "Analyze trimap boundary properties",
      "explanation": {
        "what": "Analysis of boundary region between foreground and background in trimap masks.",
        "why": "Boundary quality affects segmentation accuracy, especially for fine details like pet fur.",
        "how": "Load mask statistics, analyze boundary pixel percentages, assess boundary consistency across breeds."
      },
      "code_files": {
        "plotly": "segmentation/boundary_analysis_plotly.py",
        "matplotlib": "segmentation/boundary_analysis_matplotlib.py",
        "seaborn": "segmentation/boundary_analysis_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/precomputed/segmentation/mask_statistics.csv"
      ],
      "requirements": [
        "pandas",
        "plotly",
        "matplotlib",
        "seaborn"
      ]
    }
  },
  "core": {
    "size_distribution": {
      "title": "Image Size Distribution Analysis",
      "description": "This section analyzes the distribution of image dimensions in the dataset, including width, height, and aspect ratios. Understanding size distributions is crucial for:",
      "explanation": {
        "what": "Image size distribution analysis examines width, height, and aspect ratios of all images in the dataset.",
        "why": "Understanding size patterns helps optimize preprocessing, identify outliers, and plan model input requirements.",
        "how": "Calculate statistics for width/height/aspect ratios, visualize distributions with histograms and scatter plots, identify common sizes and outliers."
      },
      "code_files": {
        "plotly": "core/size_distribution_plotly.py",
        "matplotlib": "core/size_distribution_matplotlib.py",
        "seaborn": "core/size_distribution_seaborn.py"
      },
      "data_dependencies": [
        "https://raw.githubusercontent.com/LTSACH/AILearningHub/main/datasets/oxford-pets/data/full_metadata.csv"
      ],
      "chart_match": [
        "size-dist",
        "aspect-ratio"
      ],
      "requirements": [
        "pandas",
        "numpy",
        "plotly",
        "matplotlib",
        "seaborn"
      ]
    }
  }
}